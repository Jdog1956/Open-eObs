# -*- coding: utf-8 -*-
#
# Open-eObs documentation build configuration file, created by
# sphinx-quickstart on Wed Oct 18 18:35:36 2017.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys
import requests
import zipfile
import StringIO
import re
from shutil import copytree, ignore_patterns, rmtree


repo_path = os.path.abspath('../../')
sys.path.insert(0, repo_path)


# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.doctest',
    'sphinx.ext.intersphinx',
    'sphinx.ext.coverage',
    'sphinx.ext.viewcode',
    'sphinx.ext.githubpages',
    'sphinxodoo.ext.autodoc'
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# For the documentation to compile correctly on ReadTheDocs to compile we
# need to download the Odoo and NHClinical modules and add them to the path
# that the Odoo autodoc plugin uses to resolve paths.
#
# This is so the web controllers can be documented correctly as they inherit
# from openerp.addons.web.controllers.main.Home but also anything that uses the
# validate methods in nh_odoo_fixes.
sphinxodoo_addons_path = []
if os.environ.get('READTHEDOCS'):
    sphinxodoo_addons_path.append(repo_path)
    addon_archives = [
        'https://github.com/openeobs/nhclinical/archive/master.zip',
        'https://github.com/openeobs/odoo/archive/odoo-sans-ldap.zip'
    ]
    for archive in addon_archives:
        # This downloads the zip archive of the addons and adds the extracted
        # folder to the addons path
        r = requests.get(archive, stream=True)
        z = zipfile.ZipFile(StringIO.StringIO(r.content))
        z.extractall(repo_path)
        reg = re.compile(r'.*\/(.*)\/archive\/(.*).zip')
        archive_match = reg.match(archive)
        repo = archive_match.groups()[0]
        branch = archive_match.groups()[1]
        if repo == 'odoo':
            sphinxodoo_addons_path.append(
                '{base}/{repo}-{branch}/addons'.format(
                    base=repo_path,
                    repo=repo,
                    branch=branch
                )
            )
        else:
            sphinxodoo_addons_path.append(
                '{base}/{repo}-{branch}'.format(
                    base=repo_path,
                    repo=repo,
                    branch=branch
                )
            )

else:
    # If we're developing locally on the NeovaHealth Vagrant box we'll have
    # the addons in the following paths
    sphinxodoo_addons_path += [
        '/opt/nh/odoo/addons',
        '/vagrant/data/openeobs',
        '/vagrant/data/nhclinical'
    ]
sphinxodoo_addons = [
    'web',
    'nh_eobs',
    'nh_eobs_api',
    'nh_eobs_mobile',
    'nh_eobs_mental_health',
    'nh_food_and_fluid'
]

autodoc_mock_imports = [
    'openerp',
    'faker',
    'ldap'
]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'Open-eObs'
copyright = u'2017, NeovaHealth,BJSS'
author = u'NeovaHealth,BJSS'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = u'1.11.0'
# The full version, including alpha/beta/rc tags.
release = u'1.11.0'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
# html_theme = 'alabaster'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# This is required for the alabaster theme
# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars
html_sidebars = {
    '**': [
        'about.html',
        'navigation.html',
        'relations.html',  # needs 'show_related': True theme option to display
        'searchbox.html',
        'donate.html',
    ]
}


# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'Open-eObsdoc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'Open-eObs.tex', u'Open-eObs Documentation',
     u'NeovaHealth,BJSS', 'manual'),
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'open-eobs', u'Open-eObs Documentation',
     [author], 1)
]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'Open-eObs', u'Open-eObs Documentation',
     author, 'Open-eObs', 'One line description of project.',
     'Miscellaneous'),
]

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'https://docs.python.org/': None}

# h4xX0r time: Move All module docs under this directory so can use glob in
# toctree
projects = [
    'nh_blood_glucose',
    'nh_eobs',
    'nh_eobs_adt_gui',
    'nh_eobs_analysis',
    'nh_eobs_api',
    'nh_eobs_backup',
    'nh_eobs_mental_health',
    'nh_eobs_mobile',
    'nh_ews',
    'nh_food_and_fluid',
    'nh_gcs',
    'nh_neurological',
    'nh_neurovascular',
    'nh_observations',
    'nh_pbp',
    'nh_stools',
    'nh_urinary_analysis',
    'nh_vips',
    'nh_weight'
]
for project in projects:
    source = os.path.abspath('../../{}/docs/source/'.format(project))
    destination = os.path.abspath('./{}'.format(project))
    if os.path.exists(destination):
        rmtree(destination)
    sys.path.insert(0, os.path.abspath('../../{}'.format(project)))
    copytree(source, destination, ignore=ignore_patterns('*.py'))
